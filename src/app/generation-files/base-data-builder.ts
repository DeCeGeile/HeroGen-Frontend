import { AbilityType } from '../heroes/ability-type.model';
import { ClassType } from '../heroes/class-type.model';
import { Ability } from '../heroes/ability.model';
export class BaseDataBuilder {
    abilityTypes: AbilityType[];
    
    constructor() {
        this.abilityTypes = this.generateAbilityTypes();
    }

    generateAbilityTypes(): AbilityType[] {
        return [
            { id: 1, name: 'PHYSICAL', descriptor: 'physical damage' },
            { id: 2, name: 'MAGICAL', descriptor: 'magical damage' },
            { id: 3, name: 'HEALING', descriptor: 'healing' }
        ];
    }

    public generateClassType(): ClassType {
        let damageModifier: number = Math.random() * (1.5) + .5;
        let healModifier: number = Math.random() * (1.5) + .5;
        let hpModifier: number = Math.random() * (1.5) + .5;
        let mpModifier: number = Math.random() * (1.5) + .5;
        let defenseModifier: number = Math.random() * (1.5) + .5;

        return {
            name: 'generate me',
            damageModifier: damageModifier,
            healModifier: healModifier,
            hpModifier: hpModifier,
            mpModifier: mpModifier,
            defenseModifier: defenseModifier
        };
    }

    public generateClassTypeName(
        damageModifier: number,
        healModifier: number,
        hpModifier: number,
        mpModifier: number,
        defenseModifier: number
    ): string {
        let aggressiveComposite: number = damageModifier * 2 - (healModifier + defenseModifier)
        let bruiserComposite: number = hpModifier + defenseModifier + damageModifier - 3 * mpModifier;
        let glassComposite: number = (mpModifier + damageModifier) * 1.5 - hpModifier + defenseModifier + healModifier;
        let soakComposite: number = mpModifier + healModifier + defenseModifier - 3 * damageModifier;

        //Create comparator to return two greatest (in absolute value) composite scores

        //prefix generated by average of two dominant composite scores
        let prefix = 'Terrible';

        //baseName generated by primary dominant composite score
        let baseName = 'Warrior';

        //subName generated by secondary dominant composite score
        let subName = 'of Wrath';

        return prefix + ' ' + baseName + ' ' + subName;
    }


    public generateAbility(): Ability {
        return {
            name: 'generate me',
            abilityType: this.abilityTypes[Math.floor(Math.random() * 2 + 1)],
            value: Math.floor(Math.random() * 21 + 5)
        };
    }
}