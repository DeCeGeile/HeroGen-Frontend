import { AbilityType } from '../heroes/ability-type.model';
import { ClassType } from '../heroes/class-type.model';
import { Ability } from '../heroes/ability.model';
import { Hero } from "app/heroes/hero.model";
import { Skillset } from "app/heroes/skillset.model";
export class BaseDataBuilder {
    abilityTypes: AbilityType[];
    
    constructor() {
        this.abilityTypes = this.generateAbilityTypes();
    }

    generateAbilityTypes(): AbilityType[] {
        return [
            { id: 1, name: 'PHYSICAL', descriptor: 'physical damage' },
            { id: 2, name: 'MAGICAL', descriptor: 'magical damage' },
            { id: 3, name: 'HEALING', descriptor: 'healing' }
        ];
    }

    public generateHero():Hero{
        let classType:ClassType = this.generateClassType();
        
        //TODO: Fill once other generators complete
        return {
            name: this.generateHeroName(),
            classType: classType,
            skillset: null
        };
    }

    public generateClassType(): ClassType {
        let damageModifier: number = Math.random() * (1.5) + .5;
        let healModifier: number = Math.random() * (1.5) + .5;
        let hpModifier: number = Math.random() * (1.5) + .5;
        let mpModifier: number = Math.random() * (1.5) + .5;
        let defenseModifier: number = Math.random() * (1.5) + .5;

        return {
            name: this.generateClassTypeName(damageModifier, healModifier, hpModifier, mpModifier, defenseModifier),
            damageModifier: damageModifier,
            healModifier: healModifier,
            hpModifier: hpModifier,
            mpModifier: mpModifier,
            defenseModifier: defenseModifier
        };
    }

    generateHeroName():string{
        return 'Ivan Bonkodore';
    }

    public generateClassTypeName(
        damageModifier: number,
        healModifier: number,
        hpModifier: number,
        mpModifier: number,
        defenseModifier: number
    ): string {
     
        //Create comparator to return two greatest (in absolute value) composite scores


        //prefix generated by average of two dominant composite scores
        let prefix = 'Terrible';

        //baseName generated by primary dominant composite score
        let baseName = 'Warrior';

        //subName generated by secondary dominant composite score
        let subName = 'of Wrath';

        return prefix + ' ' + baseName + ' ' + subName;
    }

    findDominantComposite(aggressiveComposite:number, bruiserComposite:number, glassComposite:number, soakComposite:number):number[]{
        

        return null;
    }

    generateSkillset(
        damageModifier: number,
        healModifier: number,
        hpModifier: number,
        mpModifier: number,
        defenseModifier: number):Skillset {
        return {
            primaryAbility: this.generateAbility(),
            secondaryAbility: this.generateAbility(),
            tertiaryAbility: this.generateAbility(),
            quaternaryAbility: this.generateAbility()
        };
    }

    public generateAbility(): Ability {
        //TODO: Fill ability name based upon generated abillityType
        return {
            name: 'generate me',
            abilityType: this.abilityTypes[Math.floor(Math.random() * 2 + 1)],
            value: Math.floor(Math.random() * 21 + 5)
        };
    }
}