import { AbilityType } from '../heroes/ability-type.model';
import { ClassType } from '../heroes/class-type.model';
import { Ability } from '../heroes/ability.model';
import { Hero } from "app/heroes/hero.model";
import { Skillset } from "app/heroes/skillset.model";
import { StatModifier } from '../heroes/stat-modifier.model';
export class BaseDataBuilder {
    abilityTypes: AbilityType[];
    
    constructor() {
        this.abilityTypes = this.generateAbilityTypes();
    }

    generateAbilityTypes(): AbilityType[] {
        return [
            { id: 1, name: 'PHYSICAL', descriptor: 'physical damage' },
            { id: 2, name: 'MAGICAL', descriptor: 'magical damage' },
            { id: 3, name: 'HEALING', descriptor: 'healing' }
        ];
    }

    public generateHero():Hero{
        return {
            name: this.generateHeroName(),
            classType: this.generateClassType(),
            skillset: this.generateSkillset()
        };
    }

    public generateClassType(): ClassType {
        let damageModifier: StatModifier = {name: 'Damage', value: Math.random() * (1.5) + .5};
        let healModifier: StatModifier = {name: 'Healing', value: Math.random() * (1.5) + .5};
        let hpModifier: StatModifier = {name: 'HP', value: Math.random() * (1.5) + .5};
        let mpModifier: StatModifier = {name: 'MP', value: Math.random() * (1.5) + .5};
        let defenseModifier: StatModifier = {name: 'Defense', value: Math.random() * (1.5) + .5};

        return {
            name: this.generateClassTypeName(damageModifier, healModifier, hpModifier, mpModifier, defenseModifier),
            damageModifier: damageModifier,
            healModifier: healModifier,
            hpModifier: hpModifier,
            mpModifier: mpModifier,
            defenseModifier: defenseModifier
        };
    }

    generateHeroName():string{
        return 'Ivan Bonkodore';
    }

    public generateClassTypeName(
        damageModifier: StatModifier,
        healModifier: StatModifier,
        hpModifier: StatModifier,
        mpModifier: StatModifier,
        defenseModifier: StatModifier
    ): string {
     
        //Create comparator to return two greatest (in absolute value) composite scores


        //prefix generated by average of two dominant composite scores
        let prefix = 'terrible';

        //baseName generated by primary dominant composite score
        let baseName = 'Wordsmith';

        //subName generated by secondary dominant composite score
        let subName = 'of Writer\'s Block';

        return prefix + ' ' + baseName + ' ' + subName;
    }

    findDominantComposite(aggressiveComposite:number, bruiserComposite:number, glassComposite:number, soakComposite:number):number[]{
        

        return null;
    }

    generateSkillset():Skillset {
        return {
            primaryAbility: this.generateAbility(),
            secondaryAbility: this.generateAbility(),
            tertiaryAbility: this.generateAbility(),
            quaternaryAbility: this.generateAbility()
        };
    }

    public generateAbility(): Ability {
        //TODO: Fill ability name based upon generated abillityType
        return {
            name: 'generate me',
            abilityType: this.abilityTypes[Math.floor(Math.random() * 3)],
            value: Math.floor(Math.random() * 21 + 5)
        };
    }
}